("emacs" "client.go")
Loading 00debian-vars...ackage triblab
import (
       "net/rpc"
       )

       type client struct {
       	    addr string
	    }

	    func (self *client) Get(key string, value *string) error {
	    	 // connect to the server
		    conn, e := rpc.DialHTTP("tcp", self.addr)
		    	  if e != nil {
			       return e
			       	      }

					// perform the call
					   e := conn.Call("Storage.Get", key, value)
					     if e != nil {
					     	  conn.Close()
								return e
								       }

									//Close the connection
										return conn.Close()
										}

										func (self *client) Set(kv *KeyValue, succ *bool) error {
										     //connnect the server
										     		conn, e := rpc.DialHTTP("tcp", self.addr)
												      if e != nil {
												      	   return e
													   	  }

															// perform the call
															   e := conn.Call("Storage.Set", key, value)
															     if e != nil {
															     	  conn.Close()
																    return e
																    	   }

																	    //Close the connection
																	    	    return conn.Close()
																		    }

																		    func (self *client) Keys(p *pattern, list *List) error {
																		    	 conn, e := rpc.DialHTTP("tcp", self.addr)
																			       if e != nil {
																			       	    return e
																				    	   }

																					    // perform the call
																					       e := conn.Call("Storage.Get", key, value)
																					       	 if e != nil {
																						      conn.Close()
																						        return e
																							       }

																							        //Close the connection
																									return conn.Close()
																									}

																									func (self *client) ListGet(key string, list *List) error {
																									     conn, e := rpc.DialHTTP("tcp", self.addr)
																									     	   if e != nil {
																										      	return e
																											       }

																											        // perform the call
																												   e := conn.Call("Storage.Get", key, value)
																												     if e != nil {
																												     	  conn.Close()
																													    return e
																													    	   }

																														    //Close the connection
																														    	    return conn.Close()
																															    }

																															    // Append a string to the list. Set succ to true when no error.
																															    func (self *client) ListAppend(kv *KeyValue, succ *bool) error {
																															    	 conn, e := rpc.DialHTTP("tcp", self.addr)
																																       if e != nil {
																																       	    return e
																																	    	   }

																																		    // perform the call
																																		       e := conn.Call("Storage.Get", key, value)
																																		       	 if e != nil {
																																			      conn.Close()
																																			        return e
																																				       }

																																				        //Close the connection
																																						return conn.Close()
																																						}

																																						// Removes all elements that equals to kv.Value in list kv.Key
																																						// n is set to the number of elements removed.
																																						func (self *client) ListRemove(kv *KeyValue, n *int) error {
																																						     conn, e := rpc.DialHTTP("tcp", self.addr)
																																						     	   if e != nil {
																																							      	return e
																																								       }

																																								        // perform the call
																																									   e := conn.Call("Storage.Get", key, value)
																																									     if e != nil {
																																									     	  conn.Close()
																																										    return e
																																										    	   }

																																											    //Close the connection
																																											    	    return conn.Close()
																																												    }

																																												    // List all the keys of non-empty lists, where the key matches
																																												    // the given pattern.
																																												    func (self *client) ListKeys(p *Pattern, list *List) error {
																																												    	 conn, e := rpc.DialHTTP("tcp", self.addr)
																																													       if e != nil {
																																													       	    return e
																																														    	   }

																																															    // perform the call
																																															       e := conn.Call("Storage.Get", key, value)
																																															       	 if e != nil {
																																																      conn.Close()
																																																        return e
																																																	       }

																																																	        //Close the connection
																																																			return conn.Close()
																																																			}

																																																			var _ trib.Storage = new(client)
																																																			done
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...
Loading /var/cache/dictionaries-common/emacsen-ispell-dicts.el (source)...done
Loading /etc/emacs/site-start.d/50dictionaries-common.el (source)...done
For information about GNU Emacs and the GNU system, type C-h C-a.
Loading vc-git...done
byte-code: Beginning of buffer [2 times]
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? 
Please type q, s, or p; or ? for help
.../src/triblab/client.go locked by cse223_saw044... (pid 4592): (s, q, p, ?)? Auto-saving...done
Mark set
current-kill: Kill ring is empty
Mark set
current-kill: Kill ring is empty
call-interactively: No recursive edit is in progress
Auto-saving...done
Auto-saving...done
Auto-saving...done
byte-code: Beginning of buffer [2 times]
Auto-saving...done
Auto-saving...done
byte-code: End of buffer
byte-code: Beginning of buffer [6 times]
byte-code: End of buffer [23 times]
exchange-point-and-mark: No mark set in this buffer
exchange-point-and-mark: No mark set in this buffer